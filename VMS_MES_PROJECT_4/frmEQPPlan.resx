<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>